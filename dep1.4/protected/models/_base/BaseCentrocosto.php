<?php

/**
 * This is the model base class for the table "centrocosto".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Centrocosto".
 *
 * Columns in table "centrocosto" available as properties of the model,
 * followed by relations of table "centrocosto" available as properties of the model.
 *
 * @property integer $id
 * @property integer $tipoaporte_id
 * @property string $nuevo
 * @property string $anterior
 * @property string $otro
 *
 * @property Tipoaporte $tipoaporte
 * @property Subitem[] $subitems
 */
abstract class BaseCentrocosto extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'centrocosto';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Centrocosto|Centrocostos', $n);
	}

	public static function representingColumn() {
		return 'nuevo';
	}

	public function rules() {
		return array(
			array('tipoaporte_id', 'numerical', 'integerOnly'=>true),
			array('nuevo, anterior, otro', 'length', 'max'=>45),
			array('tipoaporte_id, nuevo, anterior, otro', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, tipoaporte_id, nuevo, anterior, otro', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'tipoaporte' => array(self::BELONGS_TO, 'Tipoaporte', 'tipoaporte_id'),
			'subitems' => array(self::HAS_MANY, 'Subitem', 'centrocosto_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'tipoaporte_id' => null,
			'nuevo' => Yii::t('app', 'Nuevo'),
			'anterior' => Yii::t('app', 'Anterior'),
			'otro' => Yii::t('app', 'Otro'),
			'tipoaporte' => null,
			'subitems' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('tipoaporte_id', $this->tipoaporte_id);
		$criteria->compare('nuevo', $this->nuevo, true);
		$criteria->compare('anterior', $this->anterior, true);
		$criteria->compare('otro', $this->otro, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}